diff --git a/manticore/core/state.py b/manticore/core/state.py
index 75bac01..e7e022c 100644
--- a/manticore/core/state.py
+++ b/manticore/core/state.py
@@ -1,5 +1,6 @@
 import copy
 import logging
+import time
 
 from typing import List, Tuple, Sequence
 
@@ -7,6 +8,7 @@ from .smtlib import solver, Bool, issymbolic, BitVecConstant
 from .smtlib.expression import Expression
 from ..utils.event import Eventful
 from ..utils.helpers import PickleSerializer
+from ..utils.log import RunningTime
 from ..utils import config
 from .plugin import StateDescriptor
 
@@ -189,6 +191,7 @@ class StateBase(Eventful):
         self._solver = EventSolver()
         self._total_exec = 0
         self._own_exec = 0
+        self._elapsed = time.time() - RunningTime().running_start
         # 33
         # Events are lost in serialization and fork !!
         self.forward_events_from(self._solver)
@@ -203,6 +206,7 @@ class StateBase(Eventful):
         state["context"] = self._context
         state["terminated_by"] = self._terminated_by
         state["exec_counter"] = self._total_exec
+        state["elapsed"] = self._elapsed
         return state
 
     def __setstate__(self, state):
@@ -216,6 +220,7 @@ class StateBase(Eventful):
         self._total_exec = state["exec_counter"]
         self._own_exec = 0
         self._solver = EventSolver()
+        self._elapsed = state["elapsed"]
         # 33
         # Events are lost in serialization and fork !!
         self.forward_events_from(self._solver)
diff --git a/manticore/ethereum/manticore.py b/manticore/ethereum/manticore.py
index a303dc6..bdb091c 100644
--- a/manticore/ethereum/manticore.py
+++ b/manticore/ethereum/manticore.py
@@ -1577,6 +1577,7 @@ class ManticoreEVM(ManticoreBase):
             with state as temp_state:
                 if only_if is not None:
                     temp_state.constrain(only_if)
+                temp_state._elapsed = state._elapsed
                 return self._generate_testcase_ex(temp_state, message, name=name)
         except ManticoreError:
             return None
diff --git a/manticore/utils/log.py b/manticore/utils/log.py
index c9a03ec..0f45833 100644
--- a/manticore/utils/log.py
+++ b/manticore/utils/log.py
@@ -1,6 +1,7 @@
 import logging
 import sys
 import io
+from time import time
 
 from typing import List, Set, Tuple
 
@@ -177,3 +178,26 @@ def set_verbosity(setting: int) -> None:
         # This means if you explicitly call setLevel somewhere else in the source, and it's *more*
         # verbose, it'll stay that way even if manticore_verbosity is 0.
         logger.setLevel(min(get_verbosity(logger_name), logger.getEffectiveLevel()))
+
+class Singleton(type):
+    """A metaclass type implementing the singleton pattern."""
+
+    _instances = {}
+
+    def __call__(cls, *args, **kwargs):
+        """Delegate the call to an existing resource or a a new one.
+
+        This is not thread- or process-safe by default. It must be protected with
+        a lock.
+
+        :param args:
+        :param kwargs:
+        :return:
+        """
+        if cls not in cls._instances:
+            cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)
+        return cls._instances[cls]
+
+class RunningTime(metaclass=Singleton):
+    def __init__(self):
+        self.running_start = time()
