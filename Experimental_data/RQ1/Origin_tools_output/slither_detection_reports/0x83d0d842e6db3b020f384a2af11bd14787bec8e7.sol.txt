INFO:Detectors:[93m
ERC20NonStandard (/sb/0x83d0d842e6db3b020f384a2af11bd14787bec8e7.sol#69-75) has incorrect ERC20 function interface(s):
	-transfer (/sb/0x83d0d842e6db3b020f384a2af11bd14787bec8e7.sol#72-75)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#incorrect-erc20-interface[0m
INFO:Detectors:[93m
Reentrancy in Burner.ragequit (/sb/0x83d0d842e6db3b020f384a2af11bd14787bec8e7.sol#83-116):
	External calls:
	- totalShare = hakka.totalSupply() (/sb/0x83d0d842e6db3b020f384a2af11bd14787bec8e7.sol#91)
	- hakka.burn(msg.sender,share) (/sb/0x83d0d842e6db3b020f384a2af11bd14787bec8e7.sol#93)
	State variables written after the call(s):
	- lock (/sb/0x83d0d842e6db3b020f384a2af11bd14787bec8e7.sol#116)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#reentrancy-vulnerabilities-1[0m
INFO:Detectors:[92m
Burner.ragequit has external calls inside a loop:
	- require(bool,string)(bank.withdraw(tokens[i],msg.sender,amount),fail to withdraw) (/sb/0x83d0d842e6db3b020f384a2af11bd14787bec8e7.sol#111-116)
Burner.ragequit has external calls inside a loop:
	- tokenInBank = ERC20(tokens[i]).balanceOf(address(bank)) (/sb/0x83d0d842e6db3b020f384a2af11bd14787bec8e7.sol#106-107)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation/_edit#calls-inside-a-loop[0m
INFO:Detectors:[92m
GuildBank.doTransferOut uses assembly (/sb/0x83d0d842e6db3b020f384a2af11bd14787bec8e7.sol#142-159)
	- /sb/0x83d0d842e6db3b020f384a2af11bd14787bec8e7.sol#148-159
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#assembly-usage[0m
INFO:Detectors:[92m
Ownable.transferOwnership (/sb/0x83d0d842e6db3b020f384a2af11bd14787bec8e7.sol#51-59) should be declared external
ERC20NonStandard.transfer (/sb/0x83d0d842e6db3b020f384a2af11bd14787bec8e7.sol#72-75) should be declared external
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#public-function-that-could-be-declared-as-external[0m
INFO:Detectors:[92m
Detected issues with version pragma in /sb/0x83d0d842e6db3b020f384a2af11bd14787bec8e7.sol:
	- pragma solidity0.5.16 (/sb/0x83d0d842e6db3b020f384a2af11bd14787bec8e7.sol#1): it allows old versions
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#incorrect-version-of-solidity[0m
INFO:Detectors:[92m
Low level call in GuildBank.withdraw (/sb/0x83d0d842e6db3b020f384a2af11bd14787bec8e7.sol#127-141):
	-(result,None) = receiver.call.value(amount)() /sb/0x83d0d842e6db3b020f384a2af11bd14787bec8e7.sol#133-136
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#low-level-calls[0m
INFO:Detectors:[92m
Constant 'Burner.etherAddr' (/sb/0x83d0d842e6db3b020f384a2af11bd14787bec8e7.sol#77) is not in UPPER_CASE_WITH_UNDERSCORES
Constant 'Burner.hakka' (/sb/0x83d0d842e6db3b020f384a2af11bd14787bec8e7.sol#79) is not in UPPER_CASE_WITH_UNDERSCORES
Constant 'Burner.bank' (/sb/0x83d0d842e6db3b020f384a2af11bd14787bec8e7.sol#79-83) is not in UPPER_CASE_WITH_UNDERSCORES
Constant 'GuildBank.etherAddr' (/sb/0x83d0d842e6db3b020f384a2af11bd14787bec8e7.sol#118-120) is not in UPPER_CASE_WITH_UNDERSCORES
Constant 'GuildBank.burner' (/sb/0x83d0d842e6db3b020f384a2af11bd14787bec8e7.sol#120-122) is not in UPPER_CASE_WITH_UNDERSCORES
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#conformance-to-solidity-naming-conventions[0m
INFO:Slither:/sb/0x83d0d842e6db3b020f384a2af11bd14787bec8e7.sol analyzed (6 contracts), 14 result(s) found
