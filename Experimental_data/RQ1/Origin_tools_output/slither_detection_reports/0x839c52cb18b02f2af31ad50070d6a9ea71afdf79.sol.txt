INFO:Slither:Compilation warnings/errors on /sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:97:3: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
  function ShortOrder() {
  ^ (Relevant source part starts here and spans across multiple lines).
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:106:25: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
    bytes32 orderHash = sha256(tokenUser,minMaxDMWCPNonce);
                        ^--------------------------------^
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:108:17: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
      ecrecover(keccak256("\x19Ethereum Signed Message:\n32",orderHash),v,rs[0],rs[1]) == msg.sender &&
                ^-----------------------------------------------------^
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:118:5: Warning: Invoking events without "emit" prefix is deprecated.
    TokenFulfillment(tokenUser,minMaxDMWCPNonce,v,rs,amount);
    ^------------------------------------------------------^
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:122:25: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
    bytes32 orderHash = sha256(tokenUser,minMaxDMWCPNonce);
                        ^--------------------------------^
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:124:17: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
      ecrecover(keccak256("\x19Ethereum Signed Message:\n32",orderHash),v,rs[0],rs[1]) == msg.sender &&
                ^-----------------------------------------------------^
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:128:5: Warning: Invoking events without "emit" prefix is deprecated.
    CouponDeposit(tokenUser,minMaxDMWCPNonce,v,rs,msg.value);
    ^------------------------------------------------------^
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:132:25: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
    bytes32 orderHash = sha256(tokenUser,minMaxDMWCPNonce);
                        ^--------------------------------^
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:134:17: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
      ecrecover(keccak256("\x19Ethereum Signed Message:\n32",orderHash),v,rs[0],rs[1]) == tokenUser[1] &&
                ^-----------------------------------------------------^
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:140:5: Warning: Invoking events without "emit" prefix is deprecated.
    LongPlace(tokenUser,minMaxDMWCPNonce,v,rs,msg.value);
    ^--------------------------------------------------^
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:144:32: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
    bytes32 longTransferHash = sha256(sellerShort[0],amountNonceExpiry);
                               ^--------------------------------------^
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:146:17: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
      ecrecover(keccak256("\x19Ethereum Signed Message:\n32",longTransferHash[0]),v,hashRS[1],hashRS[2]) == sellerShort[1] &&
                ^---------------------------------------------------------------^
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:152:5: Warning: Invoking events without "emit" prefix is deprecated.
    LongBought(sellerShort,amountNonceExpiry,v,hashRS,msg.value);
    ^----------------------------------------------------------^
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:156:25: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
    bytes32 orderHash = sha256(tokenUser,minMaxDMWCPNonce);
                        ^--------------------------------^
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:158:17: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
      ecrecover(keccak256("\x19Ethereum Signed Message:\n32",orderHash),v,rs[0],rs[1]) == tokenUser[1] &&
                ^-----------------------------------------------------^
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:174:7: Warning: Invoking events without "emit" prefix is deprecated.
      TokenLongExercised(tokenUser,minMaxDMWCPNonce,v,rs,couponAmount,amount);
      ^---------------------------------------------------------------------^
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:182:7: Warning: Invoking events without "emit" prefix is deprecated.
      EthLongExercised(tokenUser,minMaxDMWCPNonce,v,rs,couponAmount,orderRecord[tokenUser[1]][orderHash].longBalance[msg.sender]);
      ^-------------------------------------------------------------------------------------------------------------------------^
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:187:25: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
    bytes32 orderHash = sha256(tokenUser,minMaxDMWCPNonce);
                        ^--------------------------------^
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:189:17: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
      ecrecover(keccak256("\x19Ethereum Signed Message:\n32",orderHash),v,rs[0],rs[1]) == tokenUser[1] &&
                ^-----------------------------------------------------^
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:197:5: Warning: Invoking events without "emit" prefix is deprecated.
    DonationClaimed(tokenUser,minMaxDMWCPNonce,v,rs,orderRecord[tokenUser[1]][orderHash].coupon,orderRecord[tokenUser[1]][orderHash].balance);
    ^---------------------------------------------------------------------------------------------------------------------------------------^
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:201:25: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
    bytes32 orderHash = sha256(tokenUser,minMaxDMWCPNonce);
                        ^--------------------------------^
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:203:17: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
      ecrecover(keccak256("\x19Ethereum Signed Message:\n32",orderHash),v,rs[0],rs[1]) == msg.sender &&
                ^-----------------------------------------------------^
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:210:5: Warning: Invoking events without "emit" prefix is deprecated.
    NonActivationWithdrawal(tokenUser,minMaxDMWCPNonce,v,rs,orderRecord[msg.sender][orderHash].coupon);
    ^------------------------------------------------------------------------------------------------^
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:214:25: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
    bytes32 orderHash = sha256(tokenUser,minMaxDMWCPNonce);
                        ^--------------------------------^
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:216:17: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
      ecrecover(keccak256("\x19Ethereum Signed Message:\n32",orderHash),v,rs[0],rs[1]) == tokenUser[1] &&
                ^-----------------------------------------------------^
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:224:5: Warning: Invoking events without "emit" prefix is deprecated.
    ActivationWithdrawal(tokenUser,minMaxDMWCPNonce,v,rs,orderRecord[tokenUser[1]][orderHash].longBalance[msg.sender]);
    ^----------------------------------------------------------------------------------------------------------------^
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:228:25: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
    bytes32 orderHash = sha256(tokenUser,minMaxDMWCPNonce);
                        ^--------------------------------^
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:229:23: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
    require(ecrecover(keccak256("\x19Ethereum Signed Message:\n32",orderHash),v,rs[0],rs[1]) == tokenUser[1]);
                      ^-----------------------------------------------------^
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:234:25: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
    bytes32 orderHash = sha256(tokenUser,minMaxDMWCPNonce);
                        ^--------------------------------^
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:235:23: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
    require(ecrecover(keccak256("\x19Ethereum Signed Message:\n32",orderHash),v,rs[0],rs[1]) == tokenUser[1]);
                      ^-----------------------------------------------------^
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:240:25: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
    bytes32 orderHash = sha256(tokenUser,minMaxDMWCPNonce);
                        ^--------------------------------^
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:241:23: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
    require(ecrecover(keccak256("\x19Ethereum Signed Message:\n32",orderHash),v,rs[0],rs[1]) == tokenUser[1]);
                      ^-----------------------------------------------------^
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:246:25: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
    bytes32 orderHash = sha256(tokenUser,minMaxDMWCPNonce);
                        ^--------------------------------^
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:247:23: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
    require(ecrecover(keccak256("\x19Ethereum Signed Message:\n32",orderHash),v,rs[0],rs[1]) == tokenUser[1]);
                      ^-----------------------------------------------------^
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:252:25: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
    bytes32 orderHash = sha256(tokenUser,minMaxDMWCPNonce);
                        ^--------------------------------^
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:253:23: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
    require(ecrecover(keccak256("\x19Ethereum Signed Message:\n32",orderHash),v,rs[0],rs[1]) == tokenUser[1]);
                      ^-----------------------------------------------------^
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:258:13: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
    return  sha256(tokenUser,minMaxDWCPNonce);
            ^-------------------------------^
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:262:13: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
    return  sha256(seller,amountNonceExpiry);
            ^------------------------------^
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:5:3: Warning: No visibility specified. Defaulting to "public". 
  function totalSupply() constant returns (uint256 supply) {}
  ^---------------------------------------------------------^
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:5:44: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function totalSupply() constant returns (uint256 supply) {}
                                           ^------------^
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:9:3: Warning: No visibility specified. Defaulting to "public". 
  function balanceOf(address _owner) constant returns (uint256 balance) {}
  ^----------------------------------------------------------------------^
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:9:22: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function balanceOf(address _owner) constant returns (uint256 balance) {}
                     ^------------^
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:9:56: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function balanceOf(address _owner) constant returns (uint256 balance) {}
                                                       ^-------------^
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:15:3: Warning: No visibility specified. Defaulting to "public". 
  function transfer(address _to,uint256 _value) returns (bool success) {}
  ^---------------------------------------------------------------------^
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:15:21: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function transfer(address _to,uint256 _value) returns (bool success) {}
                    ^---------^
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:15:33: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function transfer(address _to,uint256 _value) returns (bool success) {}
                                ^------------^
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:15:58: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function transfer(address _to,uint256 _value) returns (bool success) {}
                                                         ^----------^
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:22:3: Warning: No visibility specified. Defaulting to "public". 
  function transferFrom(address _from,address _to,uint256 _value) returns (bool success) {}
  ^---------------------------------------------------------------------------------------^
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:22:25: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function transferFrom(address _from,address _to,uint256 _value) returns (bool success) {}
                        ^-----------^
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:22:39: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function transferFrom(address _from,address _to,uint256 _value) returns (bool success) {}
                                      ^---------^
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:22:51: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function transferFrom(address _from,address _to,uint256 _value) returns (bool success) {}
                                                  ^------------^
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:22:76: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function transferFrom(address _from,address _to,uint256 _value) returns (bool success) {}
                                                                           ^----------^
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:28:3: Warning: No visibility specified. Defaulting to "public". 
  function approve(address _spender,uint256 _value) returns (bool success) {}
  ^-------------------------------------------------------------------------^
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:28:20: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function approve(address _spender,uint256 _value) returns (bool success) {}
                   ^--------------^
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:28:37: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function approve(address _spender,uint256 _value) returns (bool success) {}
                                    ^------------^
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:28:62: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function approve(address _spender,uint256 _value) returns (bool success) {}
                                                             ^----------^
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:33:3: Warning: No visibility specified. Defaulting to "public". 
  function allowance(address _owner,address _spender) constant returns (uint256 remaining) {}
  ^-----------------------------------------------------------------------------------------^
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:33:22: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function allowance(address _owner,address _spender) constant returns (uint256 remaining) {}
                     ^------------^
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:33:37: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function allowance(address _owner,address _spender) constant returns (uint256 remaining) {}
                                    ^--------------^
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:33:73: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function allowance(address _owner,address _spender) constant returns (uint256 remaining) {}
                                                                        ^---------------^
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:97:3: Warning: No visibility specified. Defaulting to "public". 
  function ShortOrder() {
  ^ (Relevant source part starts here and spans across multiple lines).
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:43:3: Warning: Function state mutability can be restricted to pure
  function safeMul(uint a,uint b) internal returns (uint) {
  ^ (Relevant source part starts here and spans across multiple lines).
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:50:3: Warning: Function state mutability can be restricted to pure
  function safeDiv(uint a,uint b) internal returns (uint) {
  ^ (Relevant source part starts here and spans across multiple lines).
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:55:3: Warning: Function state mutability can be restricted to pure
  function safeSub(uint a,uint b) internal returns (uint) {
  ^ (Relevant source part starts here and spans across multiple lines).
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:60:3: Warning: Function state mutability can be restricted to pure
  function safeAdd(uint a,uint b) internal returns (uint) {
  ^ (Relevant source part starts here and spans across multiple lines).
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:5:3: Warning: Function state mutability can be restricted to pure
  function totalSupply() constant returns (uint256 supply) {}
  ^---------------------------------------------------------^
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:9:3: Warning: Function state mutability can be restricted to pure
  function balanceOf(address _owner) constant returns (uint256 balance) {}
  ^----------------------------------------------------------------------^
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:15:3: Warning: Function state mutability can be restricted to pure
  function transfer(address _to,uint256 _value) returns (bool success) {}
  ^---------------------------------------------------------------------^
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:22:3: Warning: Function state mutability can be restricted to pure
  function transferFrom(address _from,address _to,uint256 _value) returns (bool success) {}
  ^---------------------------------------------------------------------------------------^
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:28:3: Warning: Function state mutability can be restricted to pure
  function approve(address _spender,uint256 _value) returns (bool success) {}
  ^-------------------------------------------------------------------------^
/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:33:3: Warning: Function state mutability can be restricted to pure
  function allowance(address _owner,address _spender) constant returns (uint256 remaining) {}
  ^-----------------------------------------------------------------------------------------^

INFO:Detectors:[91m
Reentrancy in ShortOrder.claimDonations (/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol#188-203):
	External calls:
	- Token(tokenUser[0]).transfer(admin,orderRecord[tokenUser[1]][orderHash].shortBalance[tokenUser[0]]) (/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol#195-196)
	External calls sending eth:
	- admin.transfer(safeAdd(orderRecord[tokenUser[1]][orderHash].coupon,orderRecord[tokenUser[1]][orderHash].balance)) (/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol#193-195)
	State variables written after the call(s):
	- orderRecord (/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol#196-197)
	- orderRecord (/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol#197)
	- orderRecord (/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol#197-200)
Reentrancy in ShortOrder.exerciseLong (/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol#156-188):
	External calls:
	- Token(tokenUser[0]).transfer(msg.sender,amount) (/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol#171)
	External calls sending eth:
	- msg.sender.transfer(couponAmount) (/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol#170)
	State variables written after the call(s):
	- orderRecord (/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol#171)
	- orderRecord (/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol#172-173)
	- orderRecord (/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol#173-176)
	- orderRecord (/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol#177)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#reentrancy-vulnerabilities[0m
INFO:Detectors:[93m
Reentrancy in ShortOrder.tokenFulfillmentDeposit (/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol#105-122):
	External calls:
	- Token(tokenUser[0]).transferFrom(msg.sender,this,amount) (/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol#116)
	State variables written after the call(s):
	- orderRecord (/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol#116-118)
	- orderRecord (/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol#118-121)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#reentrancy-vulnerabilities-1[0m
INFO:Detectors:[93m
ShortOrder.tokenFulfillmentDeposit (/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol#105-122) does not use the value returned by external calls:
	-Token(tokenUser[0]).transferFrom(msg.sender,this,amount) (/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol#116)
ShortOrder.exerciseLong (/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol#156-188) does not use the value returned by external calls:
	-Token(tokenUser[0]).transfer(msg.sender,amount) (/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol#171)
ShortOrder.claimDonations (/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol#188-203) does not use the value returned by external calls:
	-Token(tokenUser[0]).transfer(admin,orderRecord[tokenUser[1]][orderHash].shortBalance[tokenUser[0]]) (/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol#195-196)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#unused-return[0m
INFO:Detectors:[92m
Token.decimals should be constant (/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol#42)
Token.name should be constant (/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol#43)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#state-variables-that-could-be-declared-constant[0m
INFO:Detectors:[92m
Token.totalSupply (/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol#5-7) should be declared external
Token.balanceOf (/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol#9-11) should be declared external
Token.transfer (/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol#15-17) should be declared external
Token.transferFrom (/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol#22-24) should be declared external
Token.approve (/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol#28-30) should be declared external
Token.allowance (/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol#33-35) should be declared external
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#public-function-that-could-be-declared-as-external[0m
INFO:Detectors:[92m
Detected issues with version pragma in /sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol:
	- pragma solidity^0.4.18 (/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol#1): it allows old versions
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#incorrect-version-of-solidity[0m
INFO:Detectors:[92m
Function 'ShortOrder.ShortOrder' (/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol#101-105) is not in mixedCase
Parameter '_admin' of ShortOrder.changeAdmin (/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol#105) is not in mixedCase
Parameter '_user' of ShortOrder.returnUserBalance (/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol#241) is not in mixedCase
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#conformance-to-solidity-naming-conventions[0m
INFO:Detectors:[92m
Token.decimals (/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol#42) is never used in Token
Token.name (/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol#43) is never used in Token
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#unused-state-variables[0m
INFO:Slither:/sb/0x839c52cb18b02f2af31ad50070d6a9ea71afdf79.sol analyzed (3 contracts), 18 result(s) found
